// import { useRef, useEffect } from 'react'
// import { useGLTF, useAnimations} from '@react-three/drei'
// import { useFrame } from '@react-three/fiber';

// import birdScene from '../canvas/rhetorician.glb';

// export function ComputersCanvas() {
//     const birdRef = useRef();

//     // Carga el modelo 3D y las animaciones del archivo GLTF
//     const { scene, animations } = useGLTF(birdScene);

//     // Accede a las animaciones para el ave
//     const { actions } = useAnimations(animations, birdRef);

//     // Reproduce la animacion 'Take 001' cuando monta el componente.
//     // Los nombres de las animaciones se encuentran donde esta el modelo en Sketchfab
//     useEffect(() => {
//       actions['Take 01'].play();
//     }, []);

//     useFrame(({clock, camera}) => {
//         // Actualiza la posicion Y para simular el vuelo del ave en forma de ola (wave)
//         birdRef.current.position.y = Math.sin(clock.elapsedTime) * 0.2 + 2;
//         // Chequea si el ave llego a cierto punto relativo en la camara
//         if (birdRef.current.position.x > camera.position.x + 10) {
//          // Cambia la direccion hacia atras y tora el ave 180 grados en las axis de Y   
//             birdRef.current.rotation.y = Math.PI;
//         } else if (birdRef.current.position.x < camera.position.x - 10) {
//          // Cambia la direccion hacia delante y resetea la rotacion del ave   
//             birdRef.current.rotation.y = 0;
//         }

//          // Actualiza las posiciones X, Z basado en la direccion
//         if (birdRef.current.rotation.y === 0) {
//          // Se mueve hacia delante  
//             birdRef.current.position.x += 0.01;
//             birdRef.current.position.z -= 0.01;
//         } else {
//          // Se mueve hacia atras    
//             birdRef.current.position.x -= 0.01
//             birdRef.current.position.z += 0.01;
//         }
//     });

//     return (
//       // Para crear y mostrar objetos 3D  
//       <mesh 
//         position={[-5, 2, 1]}
//         scale={[1, 1, 1]}
//         ref={birdRef}
//       >
//         // Se usa el elemento primitive cuando queres envestir un modelo complejo en 3D o scena.
//         <primitive object={scene} />
//       </mesh>
//     )
// }

// export default ComputersCanvas

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: engine9 (https://sketchfab.com/engine9)
License: CC-BY-SA-4.0 (http://creativecommons.org/licenses/by-sa/4.0/)
Source: https://sketchfab.com/3d-models/rhetorician-a89f035291d843069d73988cc0e25399
Title: Rhetorician
*/

import React, { useRef, useMemo, useContext, createContext } from "react";
import { useGLTF, Merged, useAnimations } from "@react-three/drei";
import statue from "../canvas/rhetorician.glb";
import { useEffect } from "react";

const context = createContext();
export function Instances({ children, ...props }) {
  const { nodes } = useGLTF("/rhetorician.glb");
  const instances = useMemo(
    () => ({
      Mentorromanretopo: nodes.mentor_roman_retopo_0,
      Nimbus: nodes.nimbus002_0,
      Nimbus1: nodes.nimbus001_0,
      Nimbus2: nodes.nimbus003_0,
    }),
    [nodes]
  );
  return (
    <Merged meshes={instances} {...props}>
      {(instances) => (
        <context.Provider value={instances} children={children} />
      )}
    </Merged>
  );
}

export function ComputersCanvas(props) {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF(statue);
  const { actions } = useAnimations(animations, group);
  

   useEffect(() => {
     actions['Take 01'].play();
   }, []);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 1.6, 0, 0.7]}
         userData={{ name: "Sketchfab_model" }}
         >
          <group name="Root" userData={{ name: "Root" }}>
            <group name="mentor_roman_retopo" position={[-0.266, 0.12, 1.326]}
             userData={{ name: "mentor roman retopo" }}
             >
              <mesh
                name="mentor_roman_retopo_0"
                castShadow
                receiveShadow
                geometry={nodes.mentor_roman_retopo_0.geometry}
                material={materials.Stone}
              />
            </group>
            <group
              name="Empty"
              position={[0.161, -0.17, 4.808]}
              rotation={[-0.104, 0.099, 0.002]}
              scale={0.892}
            >
              <group name="nimbus002">
                <mesh
                  name="nimbus002_0"
                  castShadow
                  receiveShadow
                  geometry={nodes.nimbus002_0.geometry}
                  material={materials.Crown}
                />                
              </group>
              <group name="nimbus001">
                <mesh
                  name="nimbus001_0"
                  castShadow
                  receiveShadow
                  geometry={nodes.nimbus001_0.geometry}
                  material={materials.Crown}
                />
              </group>
              <group name="nimbus003">
                <mesh
                  name="nimbus003_0"
                  castShadow
                  receiveShadow
                  geometry={nodes.nimbus003_0.geometry}
                  material={materials.Crown}
                />
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  );
}

export default ComputersCanvas